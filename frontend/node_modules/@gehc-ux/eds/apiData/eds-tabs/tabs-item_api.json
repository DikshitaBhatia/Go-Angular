{
  "EDSTabsItem": {
    "events": [
      {
        "name": "eds-tabs-tab-changed",
        "privacy": "public",
        "description": "fired when property changes and outputs event detail\nwith the changed properties (new values)\n"
      }
    ],
    "properties": [
      {
        "name": "badge",
        "privacy": "public",
        "description": "optional property that can render different badges\n to the right of the tab label. The following properties are accepted:\n{\n 'count': number,\n 'type': string,\n 'iconName': string,\n 'iconStyle': object\n}\nproperty type can take one of the following values: 'count' | 'icon' | 'indicator'\nproperty iconName is a string which can be given the name of any alert/error icon name\nproperty iconStyle is an object carrying the style of the badge icon in following format,\n{\"width.px\":\"\",\"height.px\":\"\",\"fill\":\"\"}",
        "type": "badge",
        "readonly": false,
        "defaultValue": "null"
      },
      {
        "name": "icon",
        "privacy": "public",
        "description": "optional icon that will be rendered to the left of the tab\nThe following properties are accepted:\n{\n 'loadMethod': ,\n 'filename': ,\n 'svgString': ,\n 'svgStyle': ,\n 'baseSvgPath':\n}\nRefer to `eds-icon` for more information on those properties.  Additionally,\nthree properties on this object control the behavior in the select\ncomponent.  `doToggle` controls whether the icon is changed when the\nselect state is open or closed.  `openFilename` and `closedFilename` are\nused to specify which file is used in each state.\n",
        "type": "any",
        "readonly": false,
        "defaultValue": "..."
      },
      {
        "name": "isDisabled",
        "privacy": "public",
        "description": "Controls whether the tab button is enable or not.\n",
        "type": "boolean",
        "readonly": false,
        "defaultValue": "false"
      },
      {
        "name": "isPanelShown",
        "privacy": "public",
        "description": "Determines if the tab panel is show. In most cases,\n`isPanelShown` should not need to be set by developers. The\ntabs component uses this property to control the showing of\nthe panel based on tab button navigation.\n",
        "type": "boolean",
        "readonly": false,
        "defaultValue": "false"
      },
      {
        "name": "label",
        "privacy": "public",
        "description": "Label for the tab button which controls the tab panel. This\ninput is required.\n",
        "type": "literal",
        "readonly": false
      },
      {
        "name": "uniqueId",
        "privacy": "public",
        "description": "Unique id for the tab item. This input is not required, but\nrecommended.  If not set, it will use the value from the required `label` input.\nThis property ensures proper functionality in the rendering of tab panel\ncontent.  Setting this field is required if you may have tab labels that\nare not unique.\n",
        "type": "literal",
        "readonly": false
      }
    ],
    "methods": [
      {
        "name": "remove",
        "privacy": "public",
        "description": "Remove the tabs-item from the tabs component\n",
        "args": [],
        "return": {
          "type": "void"
        }
      }
    ],
    "description": "",
    "version": "1.4.3"
  }
}