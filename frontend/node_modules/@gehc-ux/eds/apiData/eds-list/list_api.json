{
  "EDSList": {
    "events": [
      {
        "name": "eds-list-selection-changed",
        "privacy": "public",
        "description": "This event fires when the selected items list changes. Event detail \nis ItemViewModel[] which contains array of items from list when user select \nor deselects items in list.  Detail format:\n```\n [\n   {\n      \"label\": \"Item 1\",\n      \"value\": \"0\"\n   },\n   {\n      \"label\": \"Item 2\",\n      \"value\": \"1\"\n   }\n]\n ```\n"
      },
      {
        "name": "eds-list-item-drag-start",
        "privacy": "public",
        "description": "This event fires when user clicks, holds and moves a selection\nin the list. a list item and start to\ndrag item to move it. Event detail is DragDataModel object which contains item or items from list\nselected to drag and move and also html element from where drag has been started.\nThis event is only applicable with `listStyle === 'dragDrop'`. The detail\nobject has this format:\n```\n {\n    \"items\": [\n      {\n        \"index\": 4,\n        \"isSelected\": true,\n        \"model\": {\n          \"label\": \"Item 1\",\n          \"value\": \"0\"\n        }\n      }\n    ]\n }\n  ```\n\n"
      },
      {
        "name": "eds-list-item-drag-end",
        "privacy": "public",
        "description": "This event fires when user completes moving a list item (or items)\nand releases it.  This event is only applicable with `listStyle === 'dragDrop'`.\nThe detail of the event is like:\n```\n    {\n      \"items\": [\n        {\n          \"index\": 4,\n          \"isSelected\": true,\n          \"model\": {\n            \"label\": \"Item 5\",\n            \"value\": \"4\"\n          }\n        }\n      ],\n      \"dropPosition\": 6\n    }\n```\n"
      },
      {
        "name": "eds-list-error",
        "privacy": "public",
        "description": "This event fires when there is a user action error that violates\nnormal component behaviors. The application should listen for this event to\ncheck for validations on the list component.\nThe detail of the event is like:\n```\n    {\n      \"error\": \"string message\"\n    }\n```\n"
      },
      {
        "name": "eds-list-item-drop-external",
        "privacy": "public",
        "description": "This event fires when user drop item into an external list (or items)\nThis event is only applicable with `listStyle === 'dragDrop'`.\nThe detail of the event is like:\n```\n    {\n      \"items\": [\n        {\n          \"index\": 4,\n          \"isSelected\": true,\n          \"model\": {\n            \"label\": \"Item 5\",\n            \"value\": \"4\"\n          }\n        }\n      ],\n      \"dragOutListId\": 'list1',\n      \"dropInListId\": 'list2'\n      \"targetIndex\": 6\n    }\n```\n"
      }
    ],
    "properties": [
      {
        "name": "items",
        "privacy": "public",
        "description": "Specifies the list of items.  Each item must have a `label`\nproperty, and can have any other properties as required by an application.:\n\n```javascript\n{\n  \"label\": string\n  \"value\": any\n}\n```\n",
        "type": "array",
        "readonly": false,
        "defaultValue": "[]"
      },
      {
        "name": "listStyle",
        "privacy": "public",
        "description": "Specifies the list style. Supported styles include `static`\nand `dragDrop` used for draggable reordering or dropping on other elements.\n",
        "type": "union",
        "readonly": false
      },
      {
        "name": "maxItemCount",
        "privacy": "public",
        "description": "Specifies to limit the number of elements in the list.\n",
        "type": "number",
        "readonly": false,
        "defaultValue": "undefined"
      },
      {
        "name": "maxItemsInView",
        "privacy": "public",
        "description": "Specifies list height in terms of number of item that can be viewed, if not specified\ndefault height is set to list.\n",
        "type": "number",
        "readonly": false,
        "defaultValue": "undefined"
      },
      {
        "name": "selectedItems",
        "privacy": "public",
        "description": "Specifies the list of selected items.  These are references\nto a subset of the `items` array. See `items` for details.\n",
        "type": "array",
        "readonly": false,
        "defaultValue": "undefined"
      },
      {
        "name": "showHeader",
        "privacy": "public",
        "description": "Specifies whether or not to show the header label. If true\nand the property `i18nText.headerText` has a value, it will be shown.\n",
        "type": "boolean",
        "readonly": false,
        "defaultValue": "false"
      },
      {
        "name": "showItemCount",
        "privacy": "public",
        "description": "Specifies whether or not to show the number of items in the\nlist after the header label. Will only show count if `showHeader=true` and\n`i18nText.headerText` has a value.\n",
        "type": "boolean",
        "readonly": false,
        "defaultValue": "false"
      },
      {
        "name": "i18nText",
        "privacy": "public",
        "description": "",
        "type": "\"object\"",
        "readonly": false
      }
    ],
    "methods": [],
    "description": "**List** component enables the user to select or drag items in list of data.\n",
    "name": "List\n",
    "usage": "You will need to programmatically pass the items for each list.  This can be achieved with the\nfollowing vanilla JavaScript:\n\n```javascript\nconst list = document.querySelector('#myList');\nlist.items = [{\"label\":\"Item 1\", \"value\": 1},{\"label\":\"Item 2\"}, \"value\":2}];\n```\n\nEach item has the following properties:\n\n```javascript\n{\n  \"label\": string\n  \"value\": any\n}\n```\n\nYou may customize heading and other text items of the component by providing\nan object input called `i18nText`.  It must conform to this type format:\n```\n{\n\n   deselectAllText?: string;     // the text for the element that will\n                                 // deselect all items in a list. Default\n                                 // value is 'Deselect all'\n   headerText?: string;          // Specifies the header text for the list.\n   moveAllText?: string;         // Specifies the text for the element that\n                                 // will move all items from this list to another.\n                                 // Default value is 'Move all'\n   noFilterResultsText?: string; // Specifies the message that will display\n                                 // inside the item list when no items pass\n                                 // the current filtering. If present,\n                                 // \"{{0}}\" will be replaced by the current\n                                 // filter value.\n                                 // Default value is 'No results for {{0}}'\n   selectAllText?: string;       // Specifies the text for the element that\n                                 // will select all items in a list.\n                                 // Default value is 'Select all'\n }\n```\n\nThe following css variables are available for styling :\n\nCSS Variable | Description\n:----------------|:-------------\n --eds-list-background-color | Background color for the List component.\n --eds-list-border-color | Border color for the List component.\n --eds-list-item-drop-target-color | Border color for the drop element.\n --eds-list-item-border-color | Border color for each list item.\n --eds-list-item-background-color | Background color for each list item.\n --eds-list-item-selected-border-color | Border color for selected items in a list.\n --eds-list-text-disabled-color | Disable color for text in item in a list\n --eds-list-text-color | Text color for labels in the List component.\n",
    "version": "1.2.0"
  },
  "EDSListModule": {
    "events": [
      {
        "name": "eds-list-selection-changed",
        "privacy": "public",
        "description": "This event fires when the selected items list changes. Event detail \nis ItemViewModel[] which contains array of items from list when user select \nor deselects items in list.  Detail format:\n```\n [\n   {\n      \"label\": \"Item 1\",\n      \"value\": \"0\"\n   },\n   {\n      \"label\": \"Item 2\",\n      \"value\": \"1\"\n   }\n]\n ```\n"
      },
      {
        "name": "eds-list-item-drag-start",
        "privacy": "public",
        "description": "This event fires when user clicks, holds and moves a selection\nin the list. a list item and start to\ndrag item to move it. Event detail is DragDataModel object which contains item or items from list\nselected to drag and move and also html element from where drag has been started.\nThis event is only applicable with `listStyle === 'dragDrop'`. The detail\nobject has this format:\n```\n {\n    \"items\": [\n      {\n        \"index\": 4,\n        \"isSelected\": true,\n        \"model\": {\n          \"label\": \"Item 1\",\n          \"value\": \"0\"\n        }\n      }\n    ]\n }\n  ```\n\n"
      },
      {
        "name": "eds-list-item-drag-end",
        "privacy": "public",
        "description": "This event fires when user completes moving a list item (or items)\nand releases it.  This event is only applicable with `listStyle === 'dragDrop'`.\nThe detail of the event is like:\n```\n    {\n      \"items\": [\n        {\n          \"index\": 4,\n          \"isSelected\": true,\n          \"model\": {\n            \"label\": \"Item 5\",\n            \"value\": \"4\"\n          }\n        }\n      ],\n      \"dropPosition\": 6\n    }\n```\n"
      },
      {
        "name": "eds-list-error",
        "privacy": "public",
        "description": "This event fires when there is a user action error that violates\nnormal component behaviors. The application should listen for this event to\ncheck for validations on the list component.\nThe detail of the event is like:\n```\n    {\n      \"error\": \"string message\"\n    }\n```\n"
      },
      {
        "name": "eds-list-item-drop-external",
        "privacy": "public",
        "description": "This event fires when user drop item into an external list (or items)\nThis event is only applicable with `listStyle === 'dragDrop'`.\nThe detail of the event is like:\n```\n    {\n      \"items\": [\n        {\n          \"index\": 4,\n          \"isSelected\": true,\n          \"model\": {\n            \"label\": \"Item 5\",\n            \"value\": \"4\"\n          }\n        }\n      ],\n      \"dragOutListId\": 'list1',\n      \"dropInListId\": 'list2'\n      \"targetIndex\": 6\n    }\n```\n"
      }
    ],
    "properties": [],
    "methods": [],
    "version": "1.2.0"
  }
}