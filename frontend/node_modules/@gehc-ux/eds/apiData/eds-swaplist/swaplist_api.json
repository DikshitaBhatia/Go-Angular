{
  "EDSSwaplist": {
    "events": [
      {
        "name": "eds-swaplist-list-a-changed",
        "privacy": "public",
        "description": "This event fires when any aspect of list A changes. The detail of the CustomEvent\nis the new list.\n"
      },
      {
        "name": "eds-swaplist-list-b-changed",
        "privacy": "public",
        "description": "This event fires when any aspect of list B changes. The detail of the CustomEvent\nis the new list.\n"
      }
    ],
    "properties": [
      {
        "name": "filterValue",
        "privacy": "public",
        "description": "Specifies the shared filter value.  Only applicable if 'showFilter' is true.\n",
        "type": "string",
        "readonly": false,
        "defaultValue": "\"\""
      },
      {
        "name": "hideMoveAll",
        "privacy": "public",
        "description": "Specifies whether or not to show the 'Add all/Remove all' link.  This property is only applicable\nwith listStyle 'style2'.\n",
        "type": "boolean",
        "readonly": false,
        "defaultValue": "false"
      },
      {
        "name": "hideSelectAll",
        "privacy": "public",
        "description": "Specifies whether or not to show the 'Select all/Deselect all' link.  This property is\nonly applicable with listStyle 'style1'.\n",
        "type": "boolean",
        "readonly": false,
        "defaultValue": "false"
      },
      {
        "name": "isListASorted",
        "privacy": "public",
        "description": "Specifies whether or not list A is sorted. If true, then 'listAItems' will be\nsorted initially, and any items moved from list B will be inserted in sorted order instead\nof at the end.\n",
        "type": "boolean",
        "readonly": false,
        "defaultValue": "false"
      },
      {
        "name": "isListBSorted",
        "privacy": "public",
        "description": "Specifies whether or not list B is sorted. If true, then 'listBItems' will be\nsorted initially, and any items moved from list A will be inserted in sorted order instead\nof at the end.\n",
        "type": "boolean",
        "readonly": false,
        "defaultValue": "false"
      },
      {
        "name": "listAFilterValue",
        "privacy": "public",
        "description": "Specifies the list A filter value.  Only applicable if 'showListAFilter' is true.\n",
        "type": "string",
        "readonly": false,
        "defaultValue": "\"\""
      },
      {
        "name": "listAItems",
        "privacy": "public",
        "description": "Specifies the items to display in list A.\n",
        "type": "array",
        "readonly": false,
        "defaultValue": "[]"
      },
      {
        "name": "listBFilterValue",
        "privacy": "public",
        "description": "Specifies the list B filter value.  Only applicable if 'showListBFilter' is true.\n",
        "type": "string",
        "readonly": false,
        "defaultValue": "\"\""
      },
      {
        "name": "listBItems",
        "privacy": "public",
        "description": "Specifies the items to display in list B.\n",
        "type": "array",
        "readonly": false,
        "defaultValue": "[]"
      },
      {
        "name": "listStyle",
        "privacy": "public",
        "description": "Specifies the list style. Currently supported modes include:\n\n```javascript\n'style1': Multi-Select & Arrow Buttons\n'style2': Drag-And-Drop Cards\n```\n",
        "type": "union",
        "readonly": false,
        "defaultValue": "\"style2\""
      },
      {
        "name": "showFilter",
        "privacy": "public",
        "description": "Specifies whether or not both lists are filtered using a common shared\nfilter control.\n",
        "type": "boolean",
        "readonly": false,
        "defaultValue": "false"
      },
      {
        "name": "showListAFilter",
        "privacy": "public",
        "description": "Specifies whether or not to show a filter for list A. If true, a filter will\ndisplay above this list allowing the user to filter its contents.  Note this will not display\nif the 'showFilter' property is true, which takes precedence over individual list filters.\n",
        "type": "boolean",
        "readonly": false,
        "defaultValue": "false"
      },
      {
        "name": "showListBFilter",
        "privacy": "public",
        "description": "Specifies whether or not to show a filter for list B. If true, a filter will\ndisplay above this list allowing the user to filter its contents.  Note this will not display\nif the 'showFilter' property is true, which takes precedence over individual list filters.\n",
        "type": "boolean",
        "readonly": false,
        "defaultValue": "false"
      },
      {
        "name": "i18nText",
        "privacy": "public",
        "description": "",
        "type": "\"object\"",
        "readonly": false
      }
    ],
    "methods": [],
    "description": "**Swap List** component enables the user to swap item(s) between two lists.\n",
    "name": "Swap List\n",
    "usage": "You will need to programmatically pass the items for each list.  This can be achieved with the\nfollowing vanilla JavaScript:\n\n```javascript\nvar swaplist = document.querySelector('#mySwapList');\nswaplist.listAItems = [{\"value\":1,\"label\":\"Item 1\"},{\"value\":2,\"label\":\"Item 2\"}];\nswaplist.listBItems = [{\"value\":3,\"label\":\"Item 3\"},{\"value\":4,\"label\":\"Item 4\"}];\n```\n\nEach item has the following properties:\n\n```javascript\n{\n  \"label\": string\n  \"value\": any\n}\n```\nItem can also have an optional property \"movementConfine\"\n\n```javascript\n{\n  \"label\": string\n  \"value\": any\n  \"movementConfine\"?: string\n}\n```\nmovementConfine: String that describes the movement, that a list item can make within and outside of the list.\nPossible values would be locked | interList, default is interList.\nlocked - cannot move position, cannot move to other list.\ninterList - can be moved within list where it exists and to other list.\n\nThe following css variables are available for styling :\n\nCSS Variable | Description\n:----------------|:-------------\n --eds-swaplist-background-color | Background color for the Swap List component.\n --eds-swaplist-border-color | Border color for the Swap List component.\n --eds-swaplist-list-background-color | Background color for each list element.\n --eds-swaplist-list-border-color | Border color for each list element.\n --eds-swaplist-item-background-color | Background color for each list item.\n --eds-swaplist-item-border-color | Border color for each list item.\n --eds-swaplist-item-drop-target-color | Border color for the drop element.\n --eds-swaplist-item-selected-border-color | Border color for selected items in a list.\n --eds-swaplist-text-color | Text color for labels in the Swap List component.\n --eds-swaplist-text-color-disabled | Text color for disabled labels in the Swap List component.\n",
    "browsers": "Chrome, Edge (Chromium), Firefox, Safari\n",
    "workinprogress": "true\n",
    "version": "1.4.0"
  },
  "EDSSwaplistModule": {
    "events": [
      {
        "name": "eds-swaplist-list-a-changed",
        "privacy": "public",
        "description": "This event fires when any aspect of list A changes. The detail of the CustomEvent\nis the new list.\n"
      },
      {
        "name": "eds-swaplist-list-b-changed",
        "privacy": "public",
        "description": "This event fires when any aspect of list B changes. The detail of the CustomEvent\nis the new list.\n"
      }
    ],
    "properties": [],
    "methods": [],
    "version": "1.4.0"
  }
}