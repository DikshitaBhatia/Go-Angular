{
  "EDSMenu": {
    "events": [
      {
        "name": "eds-menu-open",
        "privacy": "public",
        "description": "fired when the menu opens\n"
      },
      {
        "name": "eds-menu-close",
        "privacy": "public",
        "description": "fired when the menu closes\n"
      },
      {
        "name": "eds-menu-item-selected",
        "privacy": "public",
        "description": "fired when an item is selected. The event.detail is the\nobject that was originally passed (the item in the `items` input array)\n"
      },
      {
        "name": "eds-menu-item-removed",
        "privacy": "public",
        "description": "fired when an item is removed. The event.detail is the\nobject that was originally passed (the item in the `items` input array)\n"
      }
    ],
    "properties": [
      {
        "name": "alignment",
        "privacy": "public",
        "description": "Specifies how the menu will be horizontally aligned relative to the triggering element.\nValid values include 'left' or 'right'. When set to 'left', the menu will appear with its left edge aligned\nto the left edge of the triggering element.\nWhen set to 'right', the menu will appear with its right edge aligned to the right edge of the triggering element.\n",
        "type": "string",
        "readonly": false,
        "defaultValue": "\"left\""
      },
      {
        "name": "alternateBackground",
        "privacy": "public",
        "description": "Used to set alternate background.\n",
        "type": "boolean",
        "readonly": false,
        "defaultValue": "false"
      },
      {
        "name": "border",
        "privacy": "public",
        "description": "Border type option: default | primary | secondary | tertiary | quaternary\n",
        "type": "string",
        "readonly": false
      },
      {
        "name": "boundingTarget",
        "privacy": "public",
        "description": "The target that will be used to contain the menu. Can be 'window' or any HTML element",
        "type": "any",
        "readonly": false,
        "defaultValue": "\"window\""
      },
      {
        "name": "container",
        "privacy": "public",
        "description": "If styles need to be overridden because they're being called from\nanother component, pass a string for css to hook onto\n",
        "type": "string",
        "readonly": false
      },
      {
        "name": "iconPosition",
        "privacy": "public",
        "description": "Positions the icon. `left` or `right`. Default `left`. Should only be used when no children present\n",
        "type": "string",
        "readonly": false,
        "defaultValue": "\"left\""
      },
      {
        "name": "isMenuExpandable",
        "privacy": "public",
        "description": "Used to show expandable menu if menu contains more than 3 items\n",
        "type": "boolean",
        "readonly": false,
        "defaultValue": "false"
      },
      {
        "name": "isOpened",
        "privacy": "public",
        "description": "Whether the menu is opened. Can be set and read.\n",
        "type": "boolean",
        "readonly": false,
        "defaultValue": "false"
      },
      {
        "name": "menuMaxWidth",
        "privacy": "public",
        "description": "Sets the max width of each menu panel (applies to the main menu panel\nas well as the submenu panel.  Default is 280px for both tablet and desktop screen sizes.\nValue can be either number or other valid CSS width values other than % (e.g. '200em' or '200px').\nIf the value is number only, it will be interpreted as `px`. Does not apply for\nmobile view (which is full screen width).\nFor example, setting menu-max-width=\"200px\" will result in the main menu panel having\n`max-width` style set to 200px and the submenu panel will also have `max-width` set\nto 200px, resulting in a total 400 px adding both horizontally.",
        "type": "string",
        "readonly": false
      },
      {
        "name": "menuWidth",
        "privacy": "public",
        "description": "manually set the width of the menu (optional)",
        "type": "string",
        "readonly": false
      },
      {
        "name": "preventMobileFullView",
        "privacy": "public",
        "description": "By default the menu will slide in at the bottom of thee screen in mobile view\nTurn this flag on to prevent the behavior and have the menu behave the same\nin mobile as in tablet and desktop mode",
        "type": "boolean",
        "readonly": false,
        "defaultValue": "false"
      },
      {
        "name": "submenuAutoPosition",
        "privacy": "public",
        "description": "Automatic menu positioning for the application (`left` or `right`)\n",
        "type": "string",
        "readonly": false
      },
      {
        "name": "submenuDefaultPosition",
        "privacy": "public",
        "description": "setting the default position of a child menu panel: right | left\n",
        "type": "string",
        "readonly": false,
        "defaultValue": "\"right\""
      },
      {
        "name": "trigger",
        "privacy": "public",
        "description": "an HTML element which will be the reference for opening the menu.\nIt is used to position the menu as well as triggering the opening of the menu\non click\n",
        "type": "any",
        "readonly": false
      },
      {
        "name": "items",
        "privacy": "public",
        "description": "",
        "type": "\"array\"",
        "readonly": false
      }
    ],
    "methods": [
      {
        "name": "close",
        "privacy": "public",
        "description": "Closes the menu\n",
        "args": [
          {
            "name": "force",
            "description": ""
          }
        ],
        "return": {
          "type": "void"
        }
      },
      {
        "name": "open",
        "privacy": "public",
        "description": "Opens and position the menu based on the trigger\n",
        "args": [
          {
            "name": "force",
            "description": ""
          }
        ],
        "return": {
          "type": "void"
        }
      },
      {
        "name": "toggle",
        "privacy": "public",
        "description": "Toggles the menu opened state",
        "args": [],
        "return": {
          "type": "void"
        }
      }
    ],
    "description": "The **contextual menu** component functions as a sub-menu of options that typically displays in the form of a drop down list upon user interaction, enabling them to select from pre-defined actions in relation to an item on the application screen.\n",
    "name": "Contextual menu",
    "usage": "\n\n\nMake sure the container wrapping eds-menu has `position:relative`. If it is not by default, then use the `p-rel` class that comes with `eds.min.css` or set it in your html/css for that container. This is needed for proper positioning of the menu.\n\n```html\n<div style=\"position: relative;\">\n <eds-menu></eds-menu>\n</div>\n```\n\n\n```html\n<eds-menu\n  menuWidth=\"200px\"\n  items=[\n{\nname: 'Privacy',\nicon: {\nfilename: 'ico-fpo-24'\n},\nremovable: true\n}, {\nname: 'Terms',\ndisabled: true,\nchildren: [\n{ name: 'child menu item name',\nchildren: [\n{name: 'sub menu child item name'},\n{name: 'sub menu child item name'},\n]\n},\n{name: 'child menu item name'},\n{name: 'child menu item name'},\n]\n}, {\nname: 'Accessibility',\ngroup: true\n}\n  ]\n ]>\n</eds-menu>\n```\n\n`items` data object options:\n```javascript\n{\n  name: 'Lorem Ipsum', // required: the name of your menu item\n  group: true, // optional: adds a top border to this menu item\n  disabled: true, // optional: disables this menu item\n  isSelected: true, // optional: selects this menu item\n  icon: {\n    filename: 'ico-fpo-24' // optional: outputs an icon with this name\n   'loadMethod': ,\n   'filename': ,\n   'svgString': ,\n   'svgStyle': ,\n   'baseSvgPath':\n  }\n}\n```\n\nEach item or child can have an icon by adding an `icon` object to it.\nThis will create an `eds-icon` that can be configured through the `icon`\nobject defined. The following properties are accepted:\n\nPlease refer to `eds-icon` for more information on those properties\n\nThe following css variables are available for styling :\n\nCSS Variable | Description\n:----------------|:-------------\n--eds-menu-text-color | Text color for Menu\n--eds-menu-secondary-text-color | Secondary text color for Menu\n--eds-menu-text-disabled-color | Disabled text color for Menu\n--eds-menu-background-color | Background color for Menu\n--eds-menu-onhover-background-color | Background color on hover state for Menu\n--eds-menu-onhover-text-color | Text color on hover state for Menu\n--eds-menu-box-shadow | box shadow string for the entire menu panel\n--eds-menu-border | Border for Menu panel\n--eds-menu-border-color-primary | Primary border color for Menu panel\n--eds-menu-border-color-secondary | Secondary border color for Menu panel\n--eds-menu-border-color-tertiary | Tertiary border color for Menu panel\n--eds-menu-border-color-quaternary | Quaternary border color for Menu panel\n--eds-menu-button-focus-border-color | focus border color for a menu item\n--eds-menu-divider-color | color for the divider between groups of item\n--eds-menu-divider-cancel-color | color for the divider with the cancel button in mobile full view\n--eds-menu-backdrop-color | Backdrop color menu\n--eds-menu-icon-color | Color for icons within menu\n\n",
    "browsers": "chrome, safari, firefox, ie11, edge",
    "version": "1.7.3"
  },
  "EDSMenuItem": {
    "events": [
      {
        "name": "eds-menu-open",
        "privacy": "public",
        "description": "fired when the menu opens\n"
      },
      {
        "name": "eds-menu-close",
        "privacy": "public",
        "description": "fired when the menu closes\n"
      },
      {
        "name": "eds-menu-item-selected",
        "privacy": "public",
        "description": "fired when an item is selected. The event.detail is the\nobject that was originally passed (the item in the `items` input array)\n"
      },
      {
        "name": "eds-menu-item-removed",
        "privacy": "public",
        "description": "fired when an item is removed. The event.detail is the\nobject that was originally passed (the item in the `items` input array)\n"
      }
    ],
    "properties": [],
    "methods": [],
    "description": "",
    "version": "1.7.3"
  },
  "EDSMenuModule": {
    "events": [
      {
        "name": "eds-menu-open",
        "privacy": "public",
        "description": "fired when the menu opens\n"
      },
      {
        "name": "eds-menu-close",
        "privacy": "public",
        "description": "fired when the menu closes\n"
      },
      {
        "name": "eds-menu-item-selected",
        "privacy": "public",
        "description": "fired when an item is selected. The event.detail is the\nobject that was originally passed (the item in the `items` input array)\n"
      },
      {
        "name": "eds-menu-item-removed",
        "privacy": "public",
        "description": "fired when an item is removed. The event.detail is the\nobject that was originally passed (the item in the `items` input array)\n"
      }
    ],
    "properties": [],
    "methods": [],
    "version": "1.7.3"
  }
}