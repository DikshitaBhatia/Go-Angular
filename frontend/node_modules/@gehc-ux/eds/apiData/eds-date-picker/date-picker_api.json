{
  "EDSDatePicker": {
    "events": [
      {
        "name": "eds-date-picker-error",
        "privacy": "public",
        "description": "fired when there is an error related to selecting invalid dates or typing incorrect format\n"
      },
      {
        "name": "eds-date-picker-open",
        "privacy": "public",
        "description": "fired on calendar open. There is no detail if single date picker (isInRangeMode = false) is opened.\nIn range mode (isInRangeMode = true), if start date picker is opened, it will have detail of:\n```\n{'pickerOpened': 'start'}\n```\nIn range mode (isInRangeMode = true), if end date picker is opened, it will have detail of:\n```\n{'pickerOpened': 'end'}\n```\n"
      },
      {
        "name": "eds-date-picker-close",
        "privacy": "public",
        "description": "fired on calendar close. There is no detail if single date picker (isInRangeMode = false) is closed.\nIn range mode (isInRangeMode = true), if start date picker is closed, it will have detail of:\n```\n{'pickerClosed': 'start'}\n```\nIn range mode (isInRangeMode = true), if end date picker is closed, it will have detail of:\n```\n{'pickerClosed': 'end'}\n```\n"
      },
      {
        "name": "eds-date-picker-blur",
        "privacy": "public",
        "description": "fired on date picker input field blur.\nThe detail object has the following format if isInRangeMode is false (single date picker):\n```\n{\n 'dateTime': momentObject,\n 'formattedValue': string // displayed date in the date picker. Done by using\n                        //`moment.format()` with the date picker current `format`\n}\nIn range mode (isInRangeMode = true), if start or end date picker input field get blur, it will have detail of:\n```\n{\n 'startDateTime': momentObject,\n 'endDateTime': momentObject\n}\n```\n"
      },
      {
        "name": "eds-date-picker-date-changed",
        "privacy": "public",
        "description": "fired when a new date has been selected and validated. The\ndetail object has the following format if isInRangeMode is false (single date picker):\n```\n{\n 'dateTime': momentObject,\n 'formattedValue': string // displayed date in the date picker. Done by using\n                        //`moment.format()` with the date picker current `format`\n}\n```\nThe detail object has the following format if isInRangeMode is true (date range):\n```\n{\n 'startDateTime': momentObject,\n 'endDateTime': momentObject\n}\n```\n\n"
      }
    ],
    "properties": [
      {
        "name": "endDateLabel",
        "privacy": "public",
        "description": "**Date Range specific property.** Text for the end date label.\nIf you are passing in this an attribute and you do not want any label, please pass it in as empty string with space character.\nThis is due to how empty string attributes are set to default value which is \"End Date\".\nEmpty space character might be missing in the code block. Make sure to add it if you do not want end date label.\nExample: `<eds-date-picker end-date-label=\" \"></eds-date-picker>`\n",
        "type": "string",
        "readonly": false,
        "defaultValue": "\"End date\""
      },
      {
        "name": "endDateStartAt",
        "privacy": "public",
        "description": "**Date Range specific property.** Date that the end picker in date rage opens and focuses to initially.\n",
        "type": "Moment",
        "readonly": false,
        "defaultValue": "null"
      },
      {
        "name": "filterFn",
        "privacy": "public",
        "description": "",
        "type": "reflection",
        "readonly": false
      },
      {
        "name": "format",
        "privacy": "public",
        "description": "Moment supports a lot of different formats, feel free to experiment with them. However\nthis datepicker will only be tested and validated against a few of the most common formats.\n\nAny symbol can be used between the formats but the two symbols should match\n",
        "type": "string",
        "readonly": false,
        "defaultValue": "\"MM/DD/YYYY\""
      },
      {
        "name": "hideOtherMonths",
        "privacy": "public",
        "description": "hides the dates from other months in the calendar view\n",
        "type": "boolean",
        "readonly": false,
        "defaultValue": "true"
      },
      {
        "name": "isAutoWidth",
        "privacy": "public",
        "description": "if set to true, date picker will adjust to the width of the parent container.\nif set to false, date picker will have a fixed width of 268px.\n",
        "type": "boolean",
        "readonly": false,
        "defaultValue": "false"
      },
      {
        "name": "isCurrentDate",
        "privacy": "public",
        "description": "Whether the current date is styled differently (bold) from other dates\n",
        "type": "boolean",
        "readonly": false,
        "defaultValue": "false"
      },
      {
        "name": "isDisabled",
        "privacy": "public",
        "description": "whether the date picker is disabled\n",
        "type": "boolean",
        "readonly": false,
        "defaultValue": "false"
      },
      {
        "name": "isEndDateError",
        "privacy": "public",
        "description": "**Date Range specific property.** Whether the end date input is in error.\n",
        "type": "boolean",
        "readonly": false,
        "defaultValue": "false"
      },
      {
        "name": "isError",
        "privacy": "public",
        "description": "whether the date picker is in error state\n",
        "type": "boolean",
        "readonly": false,
        "defaultValue": "false"
      },
      {
        "name": "isInRangeMode",
        "privacy": "public",
        "description": "Whether the component is in single date picker (false) or date range (true).\n",
        "type": "boolean",
        "readonly": false,
        "defaultValue": "false"
      },
      {
        "name": "isRangeRequired",
        "privacy": "public",
        "description": "**Date Range specific property.** Whether the labels for start date and end date will have required style (red asterix).\n",
        "type": "boolean",
        "readonly": false,
        "defaultValue": "false"
      },
      {
        "name": "isStartDateError",
        "privacy": "public",
        "description": "**Date Range specific property.** Whether the start date input is in error.\n",
        "type": "boolean",
        "readonly": false,
        "defaultValue": "false"
      },
      {
        "name": "locale",
        "privacy": "public",
        "description": "moment's locale id to change the localization of the date picker.\nMore information on available [locales](https://github.com/moment/moment/tree/develop/locale)\n",
        "type": "string",
        "readonly": false,
        "defaultValue": "\"en\""
      },
      {
        "name": "max",
        "privacy": "public",
        "description": "Moment object for the latest date the user can select. Any date after will be disabled in the date picker.\n",
        "type": "Moment",
        "readonly": false,
        "defaultValue": "null"
      },
      {
        "name": "min",
        "privacy": "public",
        "description": "Moment object for the earliest date the user can select. Any date before will be disabled in the date picker.\n",
        "type": "Moment",
        "readonly": false,
        "defaultValue": "null"
      },
      {
        "name": "placeholder",
        "privacy": "public",
        "description": "Set a placeholder string time format\n",
        "type": "string",
        "readonly": false
      },
      {
        "name": "selectedDate",
        "privacy": "public",
        "description": "date that is selected. It could be read or passed in to set the date programmatically.\n",
        "type": "Moment",
        "readonly": false,
        "defaultValue": "null"
      },
      {
        "name": "selectedDateRange",
        "privacy": "public",
        "description": "**Date Range specific property.** Date range that is selected. It could be read or passed in to set the date programmatically.\nIt is an Object with two properties (startDate and endDate). Value of startDate and endDate properties are Moment objects.\n{startDate: Moment, endDate: Moment }\n",
        "type": "reflection",
        "readonly": false,
        "defaultValue": "null"
      },
      {
        "name": "startAt",
        "privacy": "public",
        "description": "date that the picker opens and focuses to initially.\n",
        "type": "Moment",
        "readonly": false,
        "defaultValue": "null"
      },
      {
        "name": "startDateLabel",
        "privacy": "public",
        "description": "**Date Range specific property.** Text for the start date label.\nIf you are passing in this an attribute and you do not want any label, please pass it in as empty string with space character.\nThis is due to how empty string attributes are set to default value which is \"Start Date\".\nEmpty space character might be missing in the code block. Make sure to add it if you do not want start date label.\nExample: `<eds-date-picker start-date-label=\" \"></eds-date-picker>`\n",
        "type": "string",
        "readonly": false,
        "defaultValue": "\"Start date\""
      },
      {
        "name": "startDateStartAt",
        "privacy": "public",
        "description": "**Date Range specific property.** Date that the start picker in date rage opens and focuses to initially.\n",
        "type": "Moment",
        "readonly": false,
        "defaultValue": "null"
      },
      {
        "name": "width",
        "privacy": "public",
        "description": "width property to override the default setting.\n",
        "type": "number",
        "readonly": false
      }
    ],
    "methods": [],
    "description": "The **date picker** is a form element that enables the user to enter a\nspecific date value either through text input or by selecting a date from a graphical calendar interface widget.\n",
    "name": "Date Picker",
    "usage": "\n\nDate picker and date range components use the same webcomponent. Just need to toggle property `isInRangeMode`\nto switch between single date picker and date range variations. Since it is same webcomponent, the documentation\nis shared. Date range specific properties are called out in the api documentation.\n\nThe date picker relies on the [moment.js](https://momentjs.com/docs/) library to process, validate\nand format dates. By default the date picker is empty but it can be populated by using a moment\nobject and assigning it to `momentObj`. The moment.js library is available on `window['GEHC'].EDS.moment`\nto create new moment object.\n\n**Also note that the casing of the properites changes depending if you are using them in attributes (selected-date or is-in-range-mode) or properties (selectedDate or isInRangeMode).**\n\n**When you copy paste from the `code` block, make sure you remove any attributes that have type Moment (min, max, selected-date-range, start-at, start-date-start-at, end-date-start-at, selected-date) or type function (filter-fn).**\n\n**Since Moment object cannot be passed in as a string in the HTML, you actually need to bind that property from js/ts binding.**\n\nHere is an example of how you would do it for date picker's selectedDate property:\n\nHTML:  `<eds-date-picker></eds-date-picker>`\n\nJavascript:\n```javascript\nlet datepicker = document.querySelector( 'eds-date-picker' );\ndatepicker.selectedDate = window['GEHC'].EDS.moment();\n```\n\nIf you are using Typescript and Angular 2+, this is how you pass in the type Moment properties:\n\nOption 1: Directly setting property to value in TS\n\nHTML:  `<eds-date-picker #datepicker></eds-date-picker>`\n\nTypescript (inside class with implementing AfterViewInit):\n```typescript\n@ViewChild('datepicker') datepicker;\n\nngAfterViewInit() {\nthis.datepicker.nativeElement.selectedDate = window['GEHC'].EDS.moment();\n}\n\n```\nOption 2: Binding variable to property\n\nHTML:  `<eds-date-picker [selectedDate]=\"mySelectedDate\"></eds-date-picker>`\n\nTypescript (inside class with ChangeDetectorRef in constructor as `cd` and implementing AfterViewInit):\n```typescript\nmySelectedDate;\n\nconstructor(private cd: ChangeDetectorRef) {\n}\n\nngAfterViewInit() {\nthis.mySelectedDate = window['GEHC'].EDS.moment();\n\n// you might need to use Angular ChangeDetectorRef's detectChanges function to avoid `ExpressionChangedAfterItHasBeenCheckedError`.\nthis.cd.detectChanges();\n}\n```\n\n\nHere is how you would do it for date range's selected-date-range property:\n\nHTML:  `<eds-date-picker is-in-range-mode=\"true\"></eds-date-picker>`\n\nJavascript:\n```javascript\nlet datepicker = document.querySelector( 'eds-date-picker' );\ndatepicker.selectedDateRange = { 'startDate': window['GEHC'].EDS.moment(), 'endDate':window['GEHC'].EDS.moment().add(6, 'days')};\n```\n\nYou can pass in similarly for other Moment type properties as well.\n\n##### Examples of min, max, and filterFn input usage\n\nmin Example: Use datepicker input and moment to set the min date to be 6 months before the current date\n\nHTML:  `<eds-date-picker></eds-date-picker>`\n\nJavascript:\n```javascript\nlet datepicker = document.querySelector( 'eds-date-picker' );\ndatepicker.min = moment().subtract(6, 'months');\n```\n\nmax Example: Use datepicker input and moment to set the max date to be 6 months from the current date\n\nHTML:  `<eds-date-picker></eds-date-picker>`\n\nJavascript:\n```javascript\nlet datepicker = document.querySelector( 'eds-date-picker' );\ndatepicker.max = moment().add(6, 'months');\n```\n\nfilterFn Example: Use datepicker input and callback function with moment input and boolean output to disable weekends (Saturday and Sunday)\n\nHTML:  `<eds-date-picker></eds-date-picker>`\n\nJavascript:\n```javascript\nlet datepicker = document.querySelector( 'eds-date-picker' );\ndatepicker.filterFn = (d: Moment): boolean => {\n   // Prevent Saturday and Sunday from being selected.\n   return d.isoWeekday() !== 6 && d.isoWeekday() !== 7;\n   }\n```\n\n\nWhen a new date has been selected by a user the `eds-date-picker-date-changed` will be fired.\n\n##### Internationalization\nThe date picker relies on moment.js for [internationalization](https://momentjs.com/docs/#/i18n/).\nYou can either create your own locale and load it or use one of the pre-generated one by just calling\n`window['GEHC'].EDS.moment.locale(localeString)` with `localeString` being the name of one of\n[those files](https://github.com/moment/moment/tree/develop/locale).\n\nThe following css variables are available for styling :\n\nCSS Variable | Description\n:----------------|:-------------\n--eds-date-picker-picker-text-color | Color for date input box text\n--eds-date-picker-disabled-text-color | Color for date input box text when disabled\n--eds-date-picker-container-background-color | Color for the date picker container (excludes the input) background\n--eds-date-picker-cell-focus-border-color | Color for date cell border in hover/focus state\n--eds-date-picker-cell-selected-background-color | Color for date cell background in pressed/active state\n--eds-date-picker-cell-selected-text-color | Color for date cell text when in selected/pressed state\n--eds-date-picker-picker-arrow-color | Color for month arrow buttons icon\n--eds-date-picker-cell-month-arrow-active-background-color | Color for month arrow buttons icon background in pressed/active state\n--eds-date-picker-cell-month-arrow-active-icon-color | Color for month arrow buttons icon in pressed/active state\n--eds-date-picker-cell-month-arrow-hover-focus-border-color | Color for the border of month arrow button icons hover and focus states\n--eds-date-picker-container-outer-shadow-color | Color for the date picker container (excludes the input) outer box shadow\n--eds-date-picker-cell-prev-next-text-color |  Color for date cell text for dates that fall in previous or next month\n--eds-date-picker-cell-disabled-text-color | Color for date cell text when disabled\n--eds-date-range-cell-in-range-background-color | **Date Range specific.** Color for date cell within the selected range (excluding the start and end date)\n--eds-date-range-cell-in-range-active-background-color | **Date Range specific.** Color for in range (excluding the start and end date) date cell background in pressed/active state\n--eds-date-range-cell-in-range-non-selected-color | **Date Range specific.** Color for in range (excluding the start and end date) date cell text\n\n\n",
    "browsers": "chrome, safari, firefox, ie11, edge",
    "version": "2.7.1"
  },
  "EDSDatePickerModule": {
    "events": [
      {
        "name": "eds-date-picker-error",
        "privacy": "public",
        "description": "fired when there is an error related to selecting invalid dates or typing incorrect format\n"
      },
      {
        "name": "eds-date-picker-open",
        "privacy": "public",
        "description": "fired on calendar open. There is no detail if single date picker (isInRangeMode = false) is opened.\nIn range mode (isInRangeMode = true), if start date picker is opened, it will have detail of:\n```\n{'pickerOpened': 'start'}\n```\nIn range mode (isInRangeMode = true), if end date picker is opened, it will have detail of:\n```\n{'pickerOpened': 'end'}\n```\n"
      },
      {
        "name": "eds-date-picker-close",
        "privacy": "public",
        "description": "fired on calendar close. There is no detail if single date picker (isInRangeMode = false) is closed.\nIn range mode (isInRangeMode = true), if start date picker is closed, it will have detail of:\n```\n{'pickerClosed': 'start'}\n```\nIn range mode (isInRangeMode = true), if end date picker is closed, it will have detail of:\n```\n{'pickerClosed': 'end'}\n```\n"
      },
      {
        "name": "eds-date-picker-blur",
        "privacy": "public",
        "description": "fired on date picker input field blur.\nThe detail object has the following format if isInRangeMode is false (single date picker):\n```\n{\n 'dateTime': momentObject,\n 'formattedValue': string // displayed date in the date picker. Done by using\n                        //`moment.format()` with the date picker current `format`\n}\nIn range mode (isInRangeMode = true), if start or end date picker input field get blur, it will have detail of:\n```\n{\n 'startDateTime': momentObject,\n 'endDateTime': momentObject\n}\n```\n"
      },
      {
        "name": "eds-date-picker-date-changed",
        "privacy": "public",
        "description": "fired when a new date has been selected and validated. The\ndetail object has the following format if isInRangeMode is false (single date picker):\n```\n{\n 'dateTime': momentObject,\n 'formattedValue': string // displayed date in the date picker. Done by using\n                        //`moment.format()` with the date picker current `format`\n}\n```\nThe detail object has the following format if isInRangeMode is true (date range):\n```\n{\n 'startDateTime': momentObject,\n 'endDateTime': momentObject\n}\n```\n\n"
      }
    ],
    "properties": [],
    "methods": [],
    "version": "2.7.1"
  }
}