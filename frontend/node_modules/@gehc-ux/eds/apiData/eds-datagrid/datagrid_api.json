{
  "EDSDatagrid": {
    "events": [
      {
        "name": "eds-datagrid-row-selected",
        "privacy": "public",
        "description": "fires when row is selected\ndetail object has the following format:\n```\n{\n   selected: array // current selected row (single select)/rows (multi select)\n}\n```\n"
      },
      {
        "name": "eds-datagrid-vertical-scroll",
        "privacy": "public",
        "description": "fires when datagrid is scrolled vertically, and only when\n`enableInfiniteScroll === true`. Use this event to fetch more data\nto implement infinite scrolling (fetching more data when user reaches\nthe end of the current data set). The event detail object has the\nfollowing values:\n```\n{\n   offsetX: number,               // x position of scroll event\n   offsetY: number                // y position of scroll event\n   scrollHeight: number           // the height of the scrolling container\n                                  // it grows as more rows are fetched\n   tableBodyHeight: number        // the height of the table body\n                                  // (the rows, not including the column titles)\n   isScrollbarNearBottom: boolean // A simple boolean to test whether it\n                                  // is time to fetch more rows. Its\n                                  // value is internally determined by\n                                  // the simple formula:\n                                  //   offsetY > (scrollHeight-tableBodyHeight)\n}\n```\nYou can use the boolean event property `isScrollbarNearBottom` if it suits\nyour needs, or you can use the other event properties to calculate your\nview geometry to determine the next fetch.\n\nA simple usage example for handler of `eds-datagrid-vertical-scroll` event:\n\n```\nonDatagridScroll({offsetY, scrollHeight, tableBodyHeight, isScrollbarNearBottom }) {\n  ...\n  if (isScrollbarNearBottom) {\n    // fetch more data\n    fetch(`/api/get/more/rows?page=${page}`)\n    .then(response => response.json())\n    .then(data => this.rows = [...this.rows, data]);\n  }\n}\n```\n"
      },
      {
        "name": "eds-datagrid-row-collapsed",
        "privacy": "public",
        "description": "fires when row is collapsed\ndetail object has the following format:\n```\n{\n   row: object, // current row object\n   rowIndex: number // row position\n}\n```\n"
      },
      {
        "name": "eds-datagrid-row-expanded",
        "privacy": "public",
        "description": "fires when row is expanded\ndetail object has the following format:\n```\n{\n   row: object, // current row object\n   rowIndex: number // row position\n}\n```\n"
      },
      {
        "name": "eds-datagrid-tree-collapsed",
        "privacy": "public",
        "description": "fires when tree is collapsed\ndetail object has the following format:\n```\n{\n   row: object, // current row object\n   rowIndex: number // row position\n}\n```\n"
      },
      {
        "name": "eds-datagrid-tree-expanded",
        "privacy": "public",
        "description": "fires when tree is expanded\ndetail object has the following format:\n```\n{\n   row: object, // current row object\n   rowIndex: number // row position\n}\n```\n"
      },
      {
        "name": "eds-datagrid-cell-changed",
        "privacy": "public",
        "description": "fires when cell is changed\n```\n{\n   oldValue: object // previous row information\n   newValue: object // updated row information with cell changed\n   rowIndex: number\n   colName: string\n}\n```\n"
      },
      {
        "name": "eds-datagrid-row-count-changed",
        "privacy": "public",
        "description": "fires when row count dropdown value is changed\n```\n{\n   default: boolean // if this is the default option for the dropdown\n   label: string // option label\n   value: string // option value\n}\n```\n"
      },
      {
        "name": "eds-datagrid-cell-clicked",
        "privacy": "public",
        "description": "fires when cell or any element inside the cell is clicked\n```\n{\n   cellContent: string // content of the cell (empty if its custom cell)\n}\n```\n"
      },
      {
        "name": "eds-datagrid-change-page",
        "privacy": "public",
        "description": "fires when page is changed via pagination\n```\n{\n   offset: number\n}\n```\n"
      },
      {
        "name": "eds-datagrid-sort-column",
        "privacy": "public",
        "description": "fires when a column is sorted\ndetail object has the following format:\n```\n{\n   dir: string, //direction of sort (asc/desc)\n   prop: string // column property value\n}\n```\n"
      },
      {
        "name": "eds-datagrid-table-context-menu",
        "privacy": "public",
        "description": "fires when a right click is triggered on the datagrid\ndetail object has the following format:\n```\n{\n   event: object, //event data\n   type: string // type of event\n   content: object // data of clicked row\n}\n```\n"
      },
      {
        "name": "eds-datagrid-freeze-column",
        "privacy": "public",
        "description": "fires when freeze item is selected from the column menu\n```\n{\n   name: string,\n   prop: string,\n   minWidth: number,\n   width: number,\n   maxWidth: number,\n   isSortable: boolean,\n   isEditable: boolean,\n   isFrozen: boolean,\n}\n```\n"
      },
      {
        "name": "eds-datagrid-unfreeze-all-columns",
        "privacy": "public",
        "description": "fires when unfreeze item is selected from the column menu\n"
      },
      {
        "name": "eds-datagrid-column-dropped",
        "privacy": "public",
        "description": "fires when a dragged column is dropped\n```\n{\n  sourceIdx: number // index of the dragged column\n  targetIdx: number // index of the column where the dragged column is being dropped\n}\n```\n"
      },
      {
        "name": "eds-datagrid-hide-selected-column",
        "privacy": "public",
        "description": "fires when hide column is selected from the column menu\n```\n{\n   name: string,\n   prop: string,\n   minWidth: number,\n   width: number,\n   maxWidth: number,\n   isSortable: boolean,\n   isEditable: boolean,\n   isFrozen: boolean,\n}\n```\n"
      },
      {
        "name": "eds-datagrid-search-term-entered",
        "privacy": "public",
        "description": "fires when text is entered into the search field of datagrid\n```\n{\n   term: string,\n}\n```\n"
      },
      {
        "name": "eds-datagrid-search-term-cleared",
        "privacy": "public",
        "description": "fires when search term is cleared by clicking the clear icon or through keyboard input\n"
      },
      {
        "name": "eds-datagrid-search-item-selected",
        "privacy": "public",
        "description": "fires when item is selected in the search results dropdown\n```\n{\n   label: string,\n}\n```\n"
      },
      {
        "name": "eds-datagrid-rows-rendered",
        "privacy": "public",
        "description": "fires when rows are rendered (only on client side mode)\n```\n{\n   rows: array, // with index as predicate\n   start: number, end: number, // slicing information\n   sort: array // current sort\n}\n```\n"
      },
      {
        "name": "eds-datagrid-header-checkbox-clicked",
        "privacy": "public",
        "description": "fires when header checkbox is clicked, if the selection type is checkbox\n```\n{\n   headerCheckBoxChecked: boolean\n}\n```\n"
      }
    ],
    "properties": [
      {
        "name": "bottomSpaceThreadHold",
        "privacy": "public",
        "description": "For datagrid popover, this value is used as a threshold. If the value is smaller than\nthe remaining space between the cell-bottom and the page-bottom, show dop. Otherwise bottom.",
        "type": "number",
        "readonly": false,
        "defaultValue": "100"
      },
      {
        "name": "collapseAllRows",
        "privacy": "public",
        "description": "boolean to collapse all the rows by default when page changed.\nNote: When isExpanded is set to true on the row it will be expanded by default.",
        "type": "boolean",
        "readonly": false,
        "defaultValue": "false"
      },
      {
        "name": "columnMenuItems",
        "privacy": "public",
        "description": "User passes in this to select the required options needed in the column-menu\nThe following options are accepted in this format:\n```javascript\n['hide', 'freeze']\n```\nPlease refer to the changelog and release notes for feature completed menu options\n",
        "type": "array",
        "readonly": false,
        "defaultValue": "[]"
      },
      {
        "name": "columns",
        "privacy": "public",
        "description": "columns array. Each item can have the following properties:\n```javascript\n {\n   \"prop\": string,\n   \"name\": string,\n   \"dataType\": string // allowed values: 'string', 'number', 'datetime', 'object'. Represent the data type to permit efficient internal sorting.\n   \"width\": number,\n   \"minWidth\": number,\n   \"maxWidth\": number,\n   \"isCustom\": boolean,\n   \"isResizeable\": boolean // default true. Will allow the columns to be resized by dragging\n   \"isSortable\": boolean // default false\n   \"isEditable\": boolean // will make column editable, default false\n   \"isFrozen\": boolean // will freeze the column and the columns to the left of it, default false\n   \"isHidden\": boolean // will hide the selected column, default false\n   \"isTreeColumn\": boolean // will enable the expand/collapse icon for the tree structure, default false\n   \"isCustomColumnNameHidden\": boolean; // will hide the selected custom column name and contextual menu, default false\n}\n```\nImportant thing to note: If you wish to have custom cells the you must use the following: `\"isCustom\": true`\n",
        "type": "array",
        "readonly": false,
        "defaultValue": "[]"
      },
      {
        "name": "currentPageLimit",
        "privacy": "public",
        "description": "Page limit number (only when server side pagination is enabled,\nclient side determined by row count options).\n\n**IMPORTANT: when you are handling a lot of data, set a low current page limit (can be same than your default row option value).**\n",
        "type": "number",
        "readonly": false
      },
      {
        "name": "currentVisible",
        "privacy": "public",
        "description": "Number of pages to see.\n",
        "type": "number",
        "readonly": false,
        "defaultValue": "5"
      },
      {
        "name": "datagridHeight",
        "privacy": "public",
        "description": "Only used when `enableInfiniteScroll` is enabled, this value must be in pixels,\n(e.g. '600px'). This is needed to set the height of the datagrid viewport because\nthe height cannot be determined because of the variable height based on row count.\nThe value could be set dynamically in code, for example to handle responsive\nlayout -- when the application gets a resize event, a new value could be assigned\nto `datagridHeight`.\n\nDefault value is '300px' when `enableInfiniteScroll` is used.\n\nWhen `enableInfiniteScroll` is not used, the datagrid height is determined by the\nparent container of the datagrid.\n",
        "type": "string",
        "readonly": false,
        "defaultValue": "\"300px\""
      },
      {
        "name": "defaultServerSort",
        "privacy": "public",
        "description": "This shows the default sort icon based on the prop passed it\nand the direction of the icon.\nThis property should only be used for server-side storting (isServerSorting is true).\n\nFormat is the following:\n```\n[{\n prop: string,\n dir: string\n}]\n```\n",
        "type": "array",
        "readonly": false,
        "defaultValue": "[]"
      },
      {
        "name": "defaultSort",
        "privacy": "public",
        "description": "Sorts a column of choice by default on load.\nThis property should only be used for client-side storting (isServerSorting is false).\nFormat is the following:\n```\n[{\n prop: string,\n dir: string\n}]\n```\n",
        "type": "array",
        "readonly": false,
        "defaultValue": "[]"
      },
      {
        "name": "editing",
        "privacy": "public",
        "description": "",
        "type": "reflection",
        "readonly": false,
        "defaultValue": "{}"
      },
      {
        "name": "enableHeaderCellBorder",
        "privacy": "public",
        "description": "boolean to show/hide header cell border.\nRenders header cell with border when enableHeaderCellBorder is true.\nHide header cell border when enableHeaderCellBorder is false.\n",
        "type": "boolean",
        "readonly": false,
        "defaultValue": "false"
      },
      {
        "name": "enableHorizontalScroll",
        "privacy": "public",
        "description": "Boolean to toggle the horizontal scroll for datagrid.\n",
        "type": "boolean",
        "readonly": false,
        "defaultValue": "false"
      },
      {
        "name": "enableInfiniteScroll",
        "privacy": "public",
        "description": "Enable infinite scrolling, which enables application to\ncontinue to fetch data when approaching the end of the scrolling\nviewport. When enabled, eds-datagrid component will\nfire the `eds-datagrid-vertical-scroll` event when the user scrolls the\ndatagrid rows.  Default value: false",
        "type": "boolean",
        "readonly": false,
        "defaultValue": "false"
      },
      {
        "name": "expandRows",
        "privacy": "public",
        "description": "boolean to allow rowContent data to be displayed\nNote: When tree structure feature is enabled expand rows will not work as\nthey cannot exist at the same time",
        "type": "boolean",
        "readonly": false,
        "defaultValue": "false"
      },
      {
        "name": "footerHeight",
        "privacy": "public",
        "description": "Sets the height of the footer\n",
        "type": "string",
        "readonly": false,
        "defaultValue": "\"50\""
      },
      {
        "name": "groupByFieldId",
        "privacy": "public",
        "description": "key passed to the ngx datatable which will take one of the keys\nfrom the row data to set as parent when establishing the parent-child relationship.\n\nNote: Enabling tree structure disables the expand row feature as both cannot exist at the same time.\n\nPlease refer to Example 10 (http://ng-examples.edisondesignsystem.com/datagrid-example-10) for a sample implementation\n",
        "type": "string",
        "readonly": false,
        "defaultValue": "\"\""
      },
      {
        "name": "groupByFieldName",
        "privacy": "public",
        "description": "key passed to the ngx datatable which will be looked up as the parent key\nwhen establishing the parent-child relationship. The value for this key will be the value passed\nto the groupByFieldId property\nNote: Enabling tree structure disables the expand row feature as both cannot exist at the same time.\nPlease refer to Example 10 (http://ng-examples.edisondesignsystem.com/datagrid-example-10) for a sample implementation\n",
        "type": "string",
        "readonly": false,
        "defaultValue": "\"\""
      },
      {
        "name": "hasFrozenColumn",
        "privacy": "public",
        "description": "Boolean to check if there are frozen columns\n",
        "type": "boolean",
        "readonly": false,
        "defaultValue": "false"
      },
      {
        "name": "headerHeight",
        "privacy": "public",
        "description": "Sets the height of the header\n",
        "type": "string",
        "readonly": false,
        "defaultValue": "\"35\""
      },
      {
        "name": "hidePaginationDropdown",
        "privacy": "public",
        "description": "boolean used to hide pagination dropdown when true and show when false.\ndefault value is false.\n",
        "type": "boolean",
        "readonly": false,
        "defaultValue": "false"
      },
      {
        "name": "isCustomMenu",
        "privacy": "public",
        "description": "boolean to toggle between the column menu or user's custom menu\n",
        "type": "boolean",
        "readonly": false,
        "defaultValue": "false"
      },
      {
        "name": "isCustomScrollBar",
        "privacy": "public",
        "description": "boolean to add styles to customize scrollbar\n",
        "type": "boolean",
        "readonly": false,
        "defaultValue": "false"
      },
      {
        "name": "isCustomSorting",
        "privacy": "public",
        "description": "Boolean, set to true when a custom sorting is needed on any column sorting event.\n",
        "type": "boolean",
        "readonly": false,
        "defaultValue": "false"
      },
      {
        "name": "isInlineEditEnabled",
        "privacy": "public",
        "description": "boolean to enable inline edit icon\n",
        "type": "boolean",
        "readonly": false,
        "defaultValue": "false"
      },
      {
        "name": "isLoading",
        "privacy": "public",
        "description": "boolean to show/hide loading indicator\n",
        "type": "boolean",
        "readonly": false,
        "defaultValue": "false"
      },
      {
        "name": "isMultiLine",
        "privacy": "public",
        "description": "enables cells to show all the lines with no truncation/popover\n",
        "type": "boolean",
        "readonly": false,
        "defaultValue": "false"
      },
      {
        "name": "isMultiLineHeader",
        "privacy": "public",
        "description": "`isMultiLineHeader` is a Boolean when true wraps the header cell content\nto two lines and shows ellipsis when the length of the header is more than two of the\nheader cell width.\n",
        "type": "boolean",
        "readonly": false,
        "defaultValue": "false"
      },
      {
        "name": "isNoAlternateFill",
        "privacy": "public",
        "description": "boolean to add/remove alternate background fill for rows\n",
        "type": "boolean",
        "readonly": false,
        "defaultValue": "false"
      },
      {
        "name": "isReorderable",
        "privacy": "public",
        "description": "boolean to enable column reordering\n",
        "type": "boolean",
        "readonly": false,
        "defaultValue": "false"
      },
      {
        "name": "isSearchEnabled",
        "privacy": "public",
        "description": "boolean to enable search\n",
        "type": "boolean",
        "readonly": false,
        "defaultValue": "false"
      },
      {
        "name": "isServerSearch",
        "privacy": "public",
        "description": "boolean to enable server side search.\nSetting this to true will disable the default search that comes with the datagrid\n",
        "type": "boolean",
        "readonly": false,
        "defaultValue": "false"
      },
      {
        "name": "isServerSortPaginationStatic",
        "privacy": "public",
        "description": "boolean to enable the page to not change when sort button (server) is clicked.\nDefault behavior (false) is it goes to page 1 when sort (server) button is clicked.\n",
        "type": "boolean",
        "readonly": false,
        "defaultValue": "false"
      },
      {
        "name": "isServerSorting",
        "privacy": "public",
        "description": "Boolean to toggle the server side sorting.\n",
        "type": "boolean",
        "readonly": false,
        "defaultValue": "false"
      },
      {
        "name": "isUtilityContainerHidden",
        "privacy": "public",
        "description": "boolean to show/hide utility container\n",
        "type": "boolean",
        "readonly": false,
        "defaultValue": "false"
      },
      {
        "name": "isVerticalBorderHidden",
        "privacy": "public",
        "description": "boolean to hide/show vertical borders (true hides the vertical\nborders and false adds the vertical borders)\n",
        "type": "boolean",
        "readonly": false,
        "defaultValue": "false"
      },
      {
        "name": "isVerticalOuterBorder",
        "privacy": "public",
        "description": "boolean to hide/show vertical outer borders (true show the outer vertical borders)\n",
        "type": "boolean",
        "readonly": false,
        "defaultValue": "false"
      },
      {
        "name": "loadingText",
        "privacy": "public",
        "description": "string for loader text\n",
        "type": "string",
        "readonly": false,
        "defaultValue": "\"Loading\""
      },
      {
        "name": "pageNumber",
        "privacy": "public",
        "description": "Page on which data you want to set (only when server side pagination is enabled)\n",
        "type": "number",
        "readonly": false,
        "defaultValue": "0"
      },
      {
        "name": "placeholder",
        "privacy": "public",
        "description": "placeholder text for search component",
        "type": "string",
        "readonly": false
      },
      {
        "name": "rowCountOptions",
        "privacy": "public",
        "description": "Data for pagination dropdown. Format is the following:\n```\n{\n value: string\n label: string,\n description: string,\n default: boolean\n}\n\ndescription is optional\n```\n",
        "type": "array",
        "readonly": false,
        "defaultValue": "[]"
      },
      {
        "name": "rows",
        "privacy": "public",
        "description": "rows array. Each item can have the following properties:\n```\n{\n ... // Row data\n \"expand\": true, // If true, caret icon available for slotted information to be visible\n \"treeStatus\": 'disabled', // By default is collapsed, can have as value: 'collapsed', 'expanded' and 'disabled' (which will hide the caret)\n \"isExpanded\": true, // If true, the row is expanded onload\n \"isReadOnly\": true // If true, then row would be read-only\n}\n```\nPlease note that Custom cells would not be disabled by setting `isReadOnly` to `true`.\nThat would have to be handled separately while implementing the Custom cell slot.\n",
        "type": "array",
        "readonly": false,
        "defaultValue": "[]"
      },
      {
        "name": "searchFunction",
        "privacy": "public",
        "description": "Custom search function. If search function is `searchStartsWith`\nthen it will return results that starts with the search keyword. If search\nfunction is `searchContains` then it will return results that contains the\nsearch keyword. The default value is `searchStartsWith`.\n",
        "type": "string",
        "readonly": false,
        "defaultValue": "\"searchStartsWith\""
      },
      {
        "name": "searchItems",
        "privacy": "public",
        "description": "Array of search results\n",
        "type": "array",
        "readonly": false,
        "defaultValue": "[]"
      },
      {
        "name": "selected",
        "privacy": "public",
        "description": "Array of rows selected\n",
        "type": "array",
        "readonly": false,
        "defaultValue": "[]"
      },
      {
        "name": "selectedRowIds",
        "privacy": "public",
        "description": "Array of row references passed into the eds-datagrid that needs to be preselected\nThis is a required input for preselection of rows\nFor example if the row data looks like\n[{\n  Medication: 'Aspirin',\n  Frequency: '1 daily',\n  Prescribed: 'Grey',\n  Hospital: 'Kaiser Permanente',\n  City: 'Walnut Creek',\n  State: 'CA',\n  Doctor: 'Dr. OMalley',\n  expand: true\n}, ......]\nand if we want to preselect rows with Medication as a unique identifier the selectedRowIds can be\nselectedRowIds=['Aspirin', ....]\n",
        "type": "array",
        "readonly": false,
        "defaultValue": "[]"
      },
      {
        "name": "selectionType",
        "privacy": "public",
        "description": "Selection type (single/checkbox)\n",
        "type": "string",
        "readonly": false
      },
      {
        "name": "tableClass",
        "privacy": "public",
        "description": "class to change the row height based on table size\n",
        "type": "string",
        "readonly": false,
        "defaultValue": "\"datagrid__small\""
      },
      {
        "name": "tableSize",
        "privacy": "public",
        "description": "table size user selects to set the row height\n",
        "type": "string",
        "readonly": false
      },
      {
        "name": "uuid",
        "privacy": "public",
        "description": "Unique identifier used a reference to preselect rows\nThis is a required input for preselection of rows\nFor example if the row data looks like\n[{\n  Medication: 'Aspirin',\n  Frequency: '1 daily',\n  Prescribed: 'Grey',\n  Hospital: 'Kaiser Permanente',\n  City: 'Walnut Creek',\n  State: 'CA',\n  Doctor: 'Dr. OMalley',\n  expand: true\n}, ..... ]\nand if we want to preselect rows with Medication as a unique identifier it should be passed as\nuuid=\"Medication\" into the eds-datagrid.\n",
        "type": "string",
        "readonly": false,
        "defaultValue": "\"\""
      },
      {
        "name": "verticalScrollDebounceMs",
        "privacy": "public",
        "description": "Only used when `enableInfiniteScroll` is enabled, this setting allows\nyou to tune the debouncing interval (in milliseconds) that determines when the\n`eds-datagrid-vertical-scroll` event is fired.  This allows the scrollbar\nevents to not overload any scroll handler (such as server requests).  A\nlower number will cause more `eds-datagrid-vertical-scroll` to be fired\nper scrollbar movement; a higher number will cause less `eds-datagrid-vertical-scroll`\nevents to be fired per scrollbar movement.  Default value is 120 milliseconds.\nTo disable debouncing, use a negative value, such as -1.  The debouncing is\nimplemented on an internal function (not exposed in the API). This setting\nwill effectively control whether the internal implementation is debounced\n(if so at what interval) or not, which affects the volume of\n`eds-datagrid-vertical-scroll` events fired per scrollbar movement over time.",
        "type": "number",
        "readonly": false,
        "defaultValue": "120"
      },
      {
        "name": "count",
        "privacy": "public",
        "description": "",
        "type": "\"number\"",
        "readonly": false
      },
      {
        "name": "emptyMessage",
        "privacy": "public",
        "description": "",
        "type": "\"string\"",
        "readonly": false
      },
      {
        "name": "isServerPagination",
        "privacy": "public",
        "description": "",
        "type": "\"boolean\"",
        "readonly": false
      },
      {
        "name": "messages",
        "privacy": "public",
        "description": "",
        "type": "\"object\"",
        "readonly": false
      },
      {
        "name": "multiSelectText",
        "privacy": "public",
        "description": "",
        "type": "\"string\"",
        "readonly": false
      },
      {
        "name": "nextText",
        "privacy": "public",
        "description": "",
        "type": "\"string\"",
        "readonly": false
      },
      {
        "name": "previousText",
        "privacy": "public",
        "description": "",
        "type": "\"string\"",
        "readonly": false
      },
      {
        "name": "rowHeight",
        "privacy": "public",
        "description": "",
        "type": "\"number\"",
        "readonly": false
      },
      {
        "name": "rowPerPageText",
        "privacy": "public",
        "description": "",
        "type": "\"string\"",
        "readonly": false
      },
      {
        "name": "rowText",
        "privacy": "public",
        "description": "",
        "type": "\"string\"",
        "readonly": false
      },
      {
        "name": "showingText",
        "privacy": "public",
        "description": "",
        "type": "\"string\"",
        "readonly": false
      },
      {
        "name": "singleSelectText",
        "privacy": "public",
        "description": "",
        "type": "\"string\"",
        "readonly": false
      },
      {
        "name": "totalMessage",
        "privacy": "public",
        "description": "",
        "type": "\"string\"",
        "readonly": false
      }
    ],
    "methods": [
      {
        "name": "recalculateTable",
        "privacy": "public",
        "description": "",
        "args": [],
        "return": {
          "type": "void",
          "description": ""
        }
      }
    ],
    "description": "\n",
    "name": "Data Grid",
    "usage": "\n\nData grid has 6 named slots that you can use:\n| Slot  | Description  |\n|---|---|\n| `expand-row-*`  | the * pertains to the row index associated with (ex: `<div slot=\"expand-row-0\"></div>`). The `expand` property in row when set to `true` will enable the dropdown. In case of rows with expand rows are mixed with rows without expand row, rows without expand row must have the `expand` property explicitly at `false`, it will ensure that they are correctly align with the other rows |\n| `{{column.prop}}-*`  |  the * pertains to the row index associated with (ex: `<div slot=\"Medication-0\"></div>`). Important to also have prop `isCustom` set as `true` in the columns array |\n| `custom-column-menu-*`  |  the * pertains to the column index  |\n| `utility-icons`  | allow you to add custom icons  |\n| `empty-state`  | allow you to customize the empty state template  |\n| `footer-status`  | allow you customize the footer status.  |\n\n#### Custom Cell Implementation\n\nThe old implementation enforces the use of `name` in the `{{column.name}}-*` as\nthe unique property to render the slot for a custom cell.\n\nThe new implementation requires a column property called `ColumnOption.isCustom`\nset to true as the column's identifier in order to render the slot.\n\nProp in columns array is no longer required to be `custom-cell` anymore.\nIt can be set as the same as `name`.\n\nThis way the `prop` can be the used to render the slot instead of the `name`\nlike `{{column.prop}}-*`.\n\n#### Handling sorting on sortable columns\n\nThere are several use cases where rows won't be sorted internally and should\nbe handle manually.\n\n| Use cases | Sorting behavior |\n|---|---|\n| Custom column (`ColumnOption.isCustom` set to `true`) | By default rows are not sorted. By setting `ColumnOption.dataType` as `string`, `number` or `datetime`, rows will be sorted using internal mechanism as for non-custom column |\n| Custom sorting `isCustomSorting` | if activated, on column sort, rows won't be sorted |\n| Server side sorting  | Rows won't never be sorted |\n\n> For any sort triggered, `eds-datagrid-sort-column` event will be fired and will let you do the sort by yourself. Arrange rows and apply them to the datagrid back to see rows reordered.\n\n##### Internal sorting\n\nLetting Datagrid sort rows itself could lead to non-desirable sorted rows situation,\nespecially on dates or custom cells.\nUse [ISO format](https://en.wikipedia.org/wiki/ISO_8601) for dates on the\ndata passed into `rows` prop.\n\nOn any non-scalar data (object, array), internal sorting won't be processed\nand should be done manually\n\n#### Infinite Scrolling\n\nData grid may be configured to enable infinite scrolling (allowing more\nserver-side fetches for more data when the user scrolls to the end of the viewport).\nTo enable so-called infinite scrolling, set the property `enableInfiniteScroll` to true.\nUsing this setting will also override any setting of the property `isServerPagination`,\nsetting it also to `true` since server side paging is implied.\nWhen infinite scrolling is enabled, the following behaviors are observed:\n\n * the data grid footer disappears\n * the data grid viewport will have a vertical scrollbar when there are more rows than the viewport.\n * the event `eds-datagrid-vertical-scroll` event will be fired when the user scrolls down.\n\n\nYou must implement your own handler for the `eds-datagrid-vertical-scroll` event\nto handle the calculations and fetch more rows. The additionally fetched rows\nshould be pushed (or spliced) onto the `rows` array.\n\n\n#### Datagrid sticky pagination\n\nTo achieve sticky pagination, datagrid should be the only child of its parent\ncontainer which has a height fixed to avoid overlap.\n\n ```html\n <div class=\"datagrid__wrapper\">\n     <eds-datagrid>\n     </eds-datagrid>\n </div>\n ```\n\nThe following css variables are available for styling :\n\nCSS Variable | Description\n:----------------|:-------------\n--eds-datagrid-striped-background-color | Datagrid alternate dark row background color\n--eds-datagrid-striped-text-color | Datagrid alternate dark row text color\n--eds-datagrid-top-border-color | Top separator border color\n--eds-datagrid-border-color | Datagrid border color\n--eds-datagrid-header-text-color | Datagrid header text color\n--eds-datagrid-selected-row-bgcolor | Datagrid selected row background color\n--eds-datagrid-row-hover-border-color | Datagrid hovered row border color\n--eds-datagrid-sort-up | Datagrid ascending sort icon\n--eds-datagrid-sort-down | Datagrid descending sort icon\n--eds-datagrid-unselect-all | Datagrid unselect all icon\n--eds-datagrid-expandable-row-background-color | Datagrid expandable row background color\n",
    "browsers": "chrome, safari, firefox, ie11, edge\n",
    "workinprogress": "true\n",
    "version": "1.23.0"
  },
  "EDSDatagridModule": {
    "events": [
      {
        "name": "eds-datagrid-row-selected",
        "privacy": "public",
        "description": "fires when row is selected\ndetail object has the following format:\n```\n{\n   selected: array // current selected row (single select)/rows (multi select)\n}\n```\n"
      },
      {
        "name": "eds-datagrid-vertical-scroll",
        "privacy": "public",
        "description": "fires when datagrid is scrolled vertically, and only when\n`enableInfiniteScroll === true`. Use this event to fetch more data\nto implement infinite scrolling (fetching more data when user reaches\nthe end of the current data set). The event detail object has the\nfollowing values:\n```\n{\n   offsetX: number,               // x position of scroll event\n   offsetY: number                // y position of scroll event\n   scrollHeight: number           // the height of the scrolling container\n                                  // it grows as more rows are fetched\n   tableBodyHeight: number        // the height of the table body\n                                  // (the rows, not including the column titles)\n   isScrollbarNearBottom: boolean // A simple boolean to test whether it\n                                  // is time to fetch more rows. Its\n                                  // value is internally determined by\n                                  // the simple formula:\n                                  //   offsetY > (scrollHeight-tableBodyHeight)\n}\n```\nYou can use the boolean event property `isScrollbarNearBottom` if it suits\nyour needs, or you can use the other event properties to calculate your\nview geometry to determine the next fetch.\n\nA simple usage example for handler of `eds-datagrid-vertical-scroll` event:\n\n```\nonDatagridScroll({offsetY, scrollHeight, tableBodyHeight, isScrollbarNearBottom }) {\n  ...\n  if (isScrollbarNearBottom) {\n    // fetch more data\n    fetch(`/api/get/more/rows?page=${page}`)\n    .then(response => response.json())\n    .then(data => this.rows = [...this.rows, data]);\n  }\n}\n```\n"
      },
      {
        "name": "eds-datagrid-row-collapsed",
        "privacy": "public",
        "description": "fires when row is collapsed\ndetail object has the following format:\n```\n{\n   row: object, // current row object\n   rowIndex: number // row position\n}\n```\n"
      },
      {
        "name": "eds-datagrid-row-expanded",
        "privacy": "public",
        "description": "fires when row is expanded\ndetail object has the following format:\n```\n{\n   row: object, // current row object\n   rowIndex: number // row position\n}\n```\n"
      },
      {
        "name": "eds-datagrid-tree-collapsed",
        "privacy": "public",
        "description": "fires when tree is collapsed\ndetail object has the following format:\n```\n{\n   row: object, // current row object\n   rowIndex: number // row position\n}\n```\n"
      },
      {
        "name": "eds-datagrid-tree-expanded",
        "privacy": "public",
        "description": "fires when tree is expanded\ndetail object has the following format:\n```\n{\n   row: object, // current row object\n   rowIndex: number // row position\n}\n```\n"
      },
      {
        "name": "eds-datagrid-cell-changed",
        "privacy": "public",
        "description": "fires when cell is changed\n```\n{\n   oldValue: object // previous row information\n   newValue: object // updated row information with cell changed\n   rowIndex: number\n   colName: string\n}\n```\n"
      },
      {
        "name": "eds-datagrid-row-count-changed",
        "privacy": "public",
        "description": "fires when row count dropdown value is changed\n```\n{\n   default: boolean // if this is the default option for the dropdown\n   label: string // option label\n   value: string // option value\n}\n```\n"
      },
      {
        "name": "eds-datagrid-cell-clicked",
        "privacy": "public",
        "description": "fires when cell or any element inside the cell is clicked\n```\n{\n   cellContent: string // content of the cell (empty if its custom cell)\n}\n```\n"
      },
      {
        "name": "eds-datagrid-change-page",
        "privacy": "public",
        "description": "fires when page is changed via pagination\n```\n{\n   offset: number\n}\n```\n"
      },
      {
        "name": "eds-datagrid-sort-column",
        "privacy": "public",
        "description": "fires when a column is sorted\ndetail object has the following format:\n```\n{\n   dir: string, //direction of sort (asc/desc)\n   prop: string // column property value\n}\n```\n"
      },
      {
        "name": "eds-datagrid-table-context-menu",
        "privacy": "public",
        "description": "fires when a right click is triggered on the datagrid\ndetail object has the following format:\n```\n{\n   event: object, //event data\n   type: string // type of event\n   content: object // data of clicked row\n}\n```\n"
      },
      {
        "name": "eds-datagrid-freeze-column",
        "privacy": "public",
        "description": "fires when freeze item is selected from the column menu\n```\n{\n   name: string,\n   prop: string,\n   minWidth: number,\n   width: number,\n   maxWidth: number,\n   isSortable: boolean,\n   isEditable: boolean,\n   isFrozen: boolean,\n}\n```\n"
      },
      {
        "name": "eds-datagrid-unfreeze-all-columns",
        "privacy": "public",
        "description": "fires when unfreeze item is selected from the column menu\n"
      },
      {
        "name": "eds-datagrid-column-dropped",
        "privacy": "public",
        "description": "fires when a dragged column is dropped\n```\n{\n  sourceIdx: number // index of the dragged column\n  targetIdx: number // index of the column where the dragged column is being dropped\n}\n```\n"
      },
      {
        "name": "eds-datagrid-hide-selected-column",
        "privacy": "public",
        "description": "fires when hide column is selected from the column menu\n```\n{\n   name: string,\n   prop: string,\n   minWidth: number,\n   width: number,\n   maxWidth: number,\n   isSortable: boolean,\n   isEditable: boolean,\n   isFrozen: boolean,\n}\n```\n"
      },
      {
        "name": "eds-datagrid-search-term-entered",
        "privacy": "public",
        "description": "fires when text is entered into the search field of datagrid\n```\n{\n   term: string,\n}\n```\n"
      },
      {
        "name": "eds-datagrid-search-term-cleared",
        "privacy": "public",
        "description": "fires when search term is cleared by clicking the clear icon or through keyboard input\n"
      },
      {
        "name": "eds-datagrid-search-item-selected",
        "privacy": "public",
        "description": "fires when item is selected in the search results dropdown\n```\n{\n   label: string,\n}\n```\n"
      },
      {
        "name": "eds-datagrid-rows-rendered",
        "privacy": "public",
        "description": "fires when rows are rendered (only on client side mode)\n```\n{\n   rows: array, // with index as predicate\n   start: number, end: number, // slicing information\n   sort: array // current sort\n}\n```\n"
      },
      {
        "name": "eds-datagrid-header-checkbox-clicked",
        "privacy": "public",
        "description": "fires when header checkbox is clicked, if the selection type is checkbox\n```\n{\n   headerCheckBoxChecked: boolean\n}\n```\n"
      }
    ],
    "properties": [],
    "methods": [],
    "version": "1.23.0"
  }
}